# AUTOGENERATED! DO NOT EDIT! File to edit: ..\01_dataset.ipynb.

# %% auto 0
__all__ = ['Base', 'engine', 'conn_w', 'Storm', 'StormEvent', 'Intersection']

# %% ..\01_dataset.ipynb 3
from pathlib import Path
import geopandas as gpd
import sqlite3
import datetime
import numpy as np
import gc


from tathu.io import spatialite
from tathu.constants import KM_PER_DEGREE

import exp4.core
from .core import *
#from exp4.core import load_relato

# %% ..\01_dataset.ipynb 10
from sqlalchemy.orm import declarative_base
import geoalchemy2
from geoalchemy2 import load_spatialite, WKTElement
from sqlalchemy import create_engine, Column, Integer, Float, String, DateTime, ForeignKey
from sqlalchemy.event import listen
import pandas as pd
from geoalchemy2.shape import from_shape
from sqlalchemy.orm import sessionmaker, relationship
import os

os.environ['SPATIALITE_LIBRARY_PATH'] = "C:\\Users\\caioa\\mambaforge\\envs\\fast-env\\Library\\bin\\mod_spatialite.dll"
#SPATIALITE_LIBRARY_PATH = Path(r"C:\Users\caioa\mambaforge\envs\fast-env\Library\bin")


Base = declarative_base()

class Storm(Base):
    """
        Table to store unique storms and their evolving identifiers through splits and merges
    """
    __tablename__ = "storms"
    
    id = Column(Integer, primary_key=True)
    identifier = Column(String, index=True)
    ##TODO: Additional fields to track the first and last appearance


class StormEvent(Base):
    """
        Table to store each event, corresponding to the storm's physical data in each satellite scene
    """
    __tablename__ = "storm_events"

    id = Column(Integer, primary_key=True)
    storm_id = Column(Integer, ForeignKey("storms.id"))
    datetime = Column(DateTime)
    mean_bt = Column(Float)
    min_bt = Column(Float)
    std_dev_bt = Column(Float)
    count = Column(Integer)
    event_type = Column(String)    
    geometry = Column(geoalchemy2.Geometry(geometry_type = "POLYGON"))
    storm = relationship("Storm", backref="events")


class Intersection(Base):
    """
        Table to store the matches of storm polygons and hail reports
    """
    __tablename__ = "intersections"
    
    id = Column(Integer, primary_key=True)
    storm_event_id = Column(Integer, ForeignKey("storm_events.id"))
    #hail_report_id = Column(Integer, ForeignKey("hail_reports.id"))
    intersection_time = Column(DateTime)
    intersection_geom = Column(geoalchemy2.Geometry(geometry_type = "POLYGON"))
    storm_event = relationship("StormEvent", backref="intersections")
    

# %% ..\01_dataset.ipynb 11
engine = create_engine('sqlite:///full_database.db', echo=True)  # SQLite database file
listen(engine, "connect", load_spatialite)

conn_w = engine.connect()

# %% ..\01_dataset.ipynb 12
conn_w.close()

Base.metadata.create_all(engine)  # Create tables
